from bio import *
import sys

# simple implementation of murmur hash taken from assignment 2
def murmur(key, seed):
    m, r = 0xc6a4a7935bd1e995, 47
    h = seed ^ (8 * m)
    k = int(key) * m
    k ^= k >> r; k *= m
    h ^= k
    h *= m; h ^= h >> r
    h *= m; h ^= h >> r
    return h

# check CLI arguments
# note: 100000000 was chosen to accomodate the testing reference genome (chrM.fa) and give lower load factor
# note: 35000000 was chosen to accomodate the testing reference genome (chrM.fa)
if (len(sys.argv)) > 2: 
    ref_genome = [None] * 35000000
    hash_table = [{}] * 100000000
    ref_count = 0
    # Read in the reference genome file (sys.argv[2])
    print("-----------------------------------------")
    print("Reference Genome" + (": ") + str(sys.argv[2]))

    record = next(FASTA(sys.argv[2], fai=False))
    ref_name, ref = record.name, record.seq

    # hash the reference genome 
    print("Hashing reference genome...")
    print("ref array: " + str(len(ref_genome)))
    for kmer in ref.kmers(k=12):
        ref_genome[ref_count] = kmer

        entry = {
            kmer: [ref_count],
        }
        
        index = murmur(kmer, 13)
        index = index % len(hash_table)
        if hash_table[index] != {} and [key for key in hash_table[index]] != [kmer]:
            #  linear probing (by 3)
            while hash_table[index] != {} and [key for key in hash_table[index]] != [kmer]:
                index += 3
                if index >= len(hash_table):
                    index = index % len(hash_table)
            if [key for key in hash_table[index]] == [kmer]:
                hash_table[index][kmer].append(ref_count)
            elif hash_table[index] == {}:
                hash_table[index] = entry

        elif [key for key in hash_table[index]] == [kmer]:
            hash_table[index][kmer].append(ref_count)
            print(str(hash_table[index][kmer]))
        else:
            hash_table[index] = entry
        ref_count += 1

    print("Done hashing reference genome!")

    print("Reference count: " + str(ref_count))
    print("-----------------------------------------")
    print("Reads" + (": ") + str(sys.argv[1]))
    

    # HOW TO CAST IT BACK TO KMER !!!!!!!!!!!!!!!!!!!
    # print("testing")
    # fake = "ACTG"
    # new_kmer = seq.__new__(fake)
    # print(~new_kmer)

    # Read in the reads file (sys.argv[1])
    for r in FASTQ(sys.argv[1]):
        # need to make kmers and seed
        # print(str(r.name) + (" ") + str(r.read) + (" ") + str(len((r.read))))
        # just for testing below
        pass

# For each read in the reads file (sys.argv[1])
# Find first, middle and last k-mer
def k_mer_maker(read, k):
    k_mer_list = []
    k_mer_found = []

    for kmer in read.seq.kmers(k):
        k_mer_list.append(kmer)

    k_mer_found.append(k_mer_list[0])
    k_mer_found.append(k_mer_list[int(len(k_mer_list)/2)])
    k_mer_found.append(k_mer_list[-1])

    return k_mer_found

# Seed the k-mer in the hash table


# Use edit distance with error of <=2 to extend the k-mers



