from bio import *
import sys

# simple implementation of murmur hash taken from assignment 2
def murmur(key, seed):
    m, r = 0xc6a4a7935bd1e995, 47
    h = seed ^ (8 * m)
    k = int(key) * m
    k ^= k >> r; k *= m
    h ^= k
    h *= m; h ^= h >> r
    h *= m; h ^= h >> r
    return h

# check CLI arguments
# note: 35000 was chosen to accomodate the testing reference genome (chrM.fa) and give lower load factor
# note: 20000 was chosen to accomodate the testing reference genome (chrM.fa)
if (len(sys.argv)) > 2: 
    ref_genome = [None] * 20000
    hash_table = [{}] * 35000
    ref_count = 0
    matched = 0
    # Read in the reference genome file (sys.argv[2])
    print("-----------------------------------------")
    print("Reference Genome" + (": ") + str(sys.argv[2]))

    record = next(FASTA(sys.argv[2], fai=False))
    ref_name, ref = record.name, record.seq

    # hash the reference genome 
    print("Hashing reference genome...")
    print("Ref array length: " + str(len(ref_genome)))
    for kmer in ref.kmers(k=8):
        ref_genome[ref_count] = kmer

        entry = {
            kmer: [ref_count],
        }
        
        index = murmur(kmer, 13)
        index = index % len(hash_table)
        if hash_table[index] != {} and [key for key in hash_table[index]] != [kmer]:
            #  linear probing (by 3)
            while hash_table[index] != {} and [key for key in hash_table[index]] != [kmer]:
                index += 3
                if index >= len(hash_table):
                    index = index % len(hash_table)
            if [key for key in hash_table[index]] == [kmer]:
                hash_table[index][kmer].append(ref_count)
            elif hash_table[index] == {}:
                hash_table[index] = entry

        elif [key for key in hash_table[index]] == [kmer]:
            hash_table[index][kmer].append(ref_count)
        else:
            hash_table[index] = entry
        ref_count += 1
    # print(hash_table[index])
    # print(hash_table)
    print("Done hashing reference genome!")

    print("Reference count: " + str(ref_count))
    print("-----------------------------------------")
    print("Reads" + (": ") + str(sys.argv[1]))

    # Read in the reads file (sys.argv[1])
    
    for r in FASTQ(sys.argv[1]):
        name, read = r.name, r.read
        new_read = seq.__new__(str(read))

        k_mer_matched = []

        k_mer_list = []
        k_mer_found = []
        for kmer in read.kmers(k=8):
            k_mer_list.append(kmer)

        # Find first, middle and last k-mer
        k_mer_found.append(k_mer_list[0])
        k_mer_found.append(k_mer_list[int(len(k_mer_list)/2)])
        k_mer_found.append(k_mer_list[-1])

        # Seed the kmers in the hash table
        for k in k_mer_found:
            h = murmur(k, 13)
            h = h % len(hash_table)

            if hash_table[h] != {} and [key for key in hash_table[h]] != [k]:
                #  linear probing (by 3)
                while hash_table[h] != {} and [key for key in hash_table[h]] != [k]:
                    h += 3
                    if h >= len(hash_table):
                        h = h % len(hash_table)
                if [key for key in hash_table[h]] == [k]:
                    i = hash_table[h][k][0]
                    k_mer_matched.append(hash_table[h])
                    matched += 1
                elif hash_table[h] == {}:
                    # not found in hash table
                    pass

            elif [key for key in hash_table[h]] == [k]:
                i = hash_table[h][k][0]
                k_mer_matched.append(hash_table[h])
                matched += 1
            else:
                # no match found in hash table
                pass

        # need to make kmers and seed
        # extract index of reference genome and extend for each matched kmer
        print("K-mer matched: " + str(k_mer_matched))
        
        # Use edit distance with error of <=2 to extend the k-mers
        
    print("Matched: " + str(matched))
        # print(str(r.name) + (" ") + str(r.read))





